// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: squad/v1alpha1/coach.proto

package squadv1alpha1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CoachService_Assemble_FullMethodName = "/squad.v1alpha1.CoachService/Assemble"
	CoachService_Start_FullMethodName    = "/squad.v1alpha1.CoachService/Start"
)

// CoachServiceClient is the client API for CoachService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoachServiceClient interface {
	Assemble(ctx context.Context, in *AssembleRequest, opts ...grpc.CallOption) (*AssembleResponse, error)
	Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error)
}

type coachServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoachServiceClient(cc grpc.ClientConnInterface) CoachServiceClient {
	return &coachServiceClient{cc}
}

func (c *coachServiceClient) Assemble(ctx context.Context, in *AssembleRequest, opts ...grpc.CallOption) (*AssembleResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AssembleResponse)
	err := c.cc.Invoke(ctx, CoachService_Assemble_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coachServiceClient) Start(ctx context.Context, in *StartRequest, opts ...grpc.CallOption) (*StartResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartResponse)
	err := c.cc.Invoke(ctx, CoachService_Start_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoachServiceServer is the server API for CoachService service.
// All implementations must embed UnimplementedCoachServiceServer
// for forward compatibility.
type CoachServiceServer interface {
	Assemble(context.Context, *AssembleRequest) (*AssembleResponse, error)
	Start(context.Context, *StartRequest) (*StartResponse, error)
	mustEmbedUnimplementedCoachServiceServer()
}

// UnimplementedCoachServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCoachServiceServer struct{}

func (UnimplementedCoachServiceServer) Assemble(context.Context, *AssembleRequest) (*AssembleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assemble not implemented")
}
func (UnimplementedCoachServiceServer) Start(context.Context, *StartRequest) (*StartResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedCoachServiceServer) mustEmbedUnimplementedCoachServiceServer() {}
func (UnimplementedCoachServiceServer) testEmbeddedByValue()                      {}

// UnsafeCoachServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoachServiceServer will
// result in compilation errors.
type UnsafeCoachServiceServer interface {
	mustEmbedUnimplementedCoachServiceServer()
}

func RegisterCoachServiceServer(s grpc.ServiceRegistrar, srv CoachServiceServer) {
	// If the following call pancis, it indicates UnimplementedCoachServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CoachService_ServiceDesc, srv)
}

func _CoachService_Assemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachServiceServer).Assemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoachService_Assemble_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachServiceServer).Assemble(ctx, req.(*AssembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CoachService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoachServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoachService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoachServiceServer).Start(ctx, req.(*StartRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CoachService_ServiceDesc is the grpc.ServiceDesc for CoachService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoachService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "squad.v1alpha1.CoachService",
	HandlerType: (*CoachServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Assemble",
			Handler:    _CoachService_Assemble_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _CoachService_Start_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "squad/v1alpha1/coach.proto",
}
